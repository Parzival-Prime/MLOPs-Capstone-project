name: Capstone-Project

on: 
  push:
    branches: ["main"]
jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest
    env: 
          ENV: ${{ secrets.ENV }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          SERVICE_PRINCIPLE_ID: ${{ secrets.SERVICE_PRINCIPLE_ID }}
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_ACCOUNT_URL: ${{ secrets.AZURE_STORAGE_ACCOUNT_URL }}
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
          DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_TOKEN }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' 

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt')}}
          restore-keys: ${{ runner.os }}-pip-
      
      - name: Install Dependencies
        run: pip install -r requirements.txt && python -m spacy download en_core_web_sm
          
      - name: Set ENV variables and Run Pipeline through DVC
        run: dvc repro

      - name: Run model tests
        run: python -m unittest tests/test_model.py

      - name: Promote model to production
        if: success()
        run: python scripts/promote_model.py
      
      - name: Run Flask app tests
        if: success()
        run: python -m unittest tests/test_flask_app.py
      
      - name: Login to Dockerhub
        id: docker-login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build, Tag, and Push image to dockerhub
        id: build-image
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build --build-arg DAGSHUB_TOKEN=${{ secrets.DAGSHUB_TOKEN }} -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .
          docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG  
          echo "image=$DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          resource-group: ${{ secrets.RESOURCE_GROUP }}
      
      - name: Set Up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Apply Kubernetes Manifests
        run: kubectl apply -f deployment.yaml
        
      - name: Deploy to AKS
        run: |
          kubectl set image deployment/capstone-app capstone-app-container=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ secrets.IMAGE_TAG }}